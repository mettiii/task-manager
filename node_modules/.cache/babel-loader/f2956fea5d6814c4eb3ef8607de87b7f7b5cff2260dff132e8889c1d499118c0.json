{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\abera\\\\task-manager\\\\src\\\\component\\\\TaskInput.jsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useContext } from \"react\";\nimport { TaskContext } from \"../TaskContext\";\nimport { Button } from \"@mui/material\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TaskInput() {\n  _s();\n  const {\n    dispatch\n  } = useContext(TaskContext);\n  const inputRef = useRef();\n  const addTask = () => {\n    const taskText = inputRef.current.value.trim();\n    if (taskText) {\n      dispatch({\n        type: \"ADD_TASK\",\n        payload: taskText\n      });\n      inputRef.current.value = \"\";\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        ref: inputRef,\n        placeholder: \"Add a task\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      className: \"btn\",\n      variant: \"contained\",\n      onClick: addTask,\n      children: \"Add Task\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 5\n  }, this);\n}\n_s(TaskInput, \"s8+ZPLcLxbMf5ChEjWVMo8SIY4Y=\");\n_c = TaskInput;\nexport default TaskInput;\nvar _c;\n$RefreshReg$(_c, \"TaskInput\");","map":{"version":3,"names":["React","useRef","useContext","TaskContext","Button","jsxDEV","_jsxDEV","TaskInput","_s","dispatch","inputRef","addTask","taskText","current","value","trim","type","payload","children","ref","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","className","variant","onClick","_c","$RefreshReg$"],"sources":["C:/Users/abera/task-manager/src/component/TaskInput.jsx"],"sourcesContent":["import React, { useRef, useContext } from \"react\";\r\nimport { TaskContext } from \"../TaskContext\";\r\nimport { Button } from \"@mui/material\";\r\n\r\nfunction TaskInput() {\r\n  const { dispatch } = useContext(TaskContext);\r\n  const inputRef = useRef();\r\n\r\n  const addTask = () => {\r\n    const taskText = inputRef.current.value.trim();\r\n    if (taskText) {\r\n      dispatch({ type: \"ADD_TASK\", payload: taskText });\r\n      inputRef.current.value = \"\";\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <input type=\"text\" ref={inputRef} placeholder=\"Add a task\" />\r\n      </div>\r\n      <Button className=\"btn\" variant=\"contained\" onClick={addTask}>\r\n        Add Task\r\n      </Button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TaskInput;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,MAAM,EAAEC,UAAU,QAAQ,OAAO;AACjD,SAASC,WAAW,QAAQ,gBAAgB;AAC5C,SAASC,MAAM,QAAQ,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvC,SAASC,SAASA,CAAA,EAAG;EAAAC,EAAA;EACnB,MAAM;IAAEC;EAAS,CAAC,GAAGP,UAAU,CAACC,WAAW,CAAC;EAC5C,MAAMO,QAAQ,GAAGT,MAAM,CAAC,CAAC;EAEzB,MAAMU,OAAO,GAAGA,CAAA,KAAM;IACpB,MAAMC,QAAQ,GAAGF,QAAQ,CAACG,OAAO,CAACC,KAAK,CAACC,IAAI,CAAC,CAAC;IAC9C,IAAIH,QAAQ,EAAE;MACZH,QAAQ,CAAC;QAAEO,IAAI,EAAE,UAAU;QAAEC,OAAO,EAAEL;MAAS,CAAC,CAAC;MACjDF,QAAQ,CAACG,OAAO,CAACC,KAAK,GAAG,EAAE;IAC7B;EACF,CAAC;EAED,oBACER,OAAA;IAAAY,QAAA,gBACEZ,OAAA;MAAAY,QAAA,eACEZ,OAAA;QAAOU,IAAI,EAAC,MAAM;QAACG,GAAG,EAAET,QAAS;QAACU,WAAW,EAAC;MAAY;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC1D,CAAC,eACNlB,OAAA,CAACF,MAAM;MAACqB,SAAS,EAAC,KAAK;MAACC,OAAO,EAAC,WAAW;MAACC,OAAO,EAAEhB,OAAQ;MAAAO,QAAA,EAAC;IAE9D;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN,CAAC;AAEV;AAAChB,EAAA,CAtBQD,SAAS;AAAAqB,EAAA,GAATrB,SAAS;AAwBlB,eAAeA,SAAS;AAAC,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}